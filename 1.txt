<?php

require_once $_SERVER['DOCUMENT_ROOT'] . "/apis/master/db.php";
require_once $_SERVER['DOCUMENT_ROOT'] . "/apis/lands/lands.class.be.php";

class TestMaster extends DB02 {
    public function fetchRecipt($receiptId){
        $conn = $this->conn;
        $stmt = $conn->prepare("SELECT a.*, b.fullName 'createdByName', c.desc 'countryCode', d.id 'appId', e.id 'property_id', e.upn, e.plotNo, e.blockNo, e.physicalLocation, g.name 'receiptDescription' FROM `eLandReceiptMaster` a LEFT JOIN `users` b ON (a.createdBy = b.id) LEFT JOIN `countries` c ON (a.mobileCountryId = c.id) LEFT JOIN `request` d ON (a.id = d.receiptId) LEFT JOIN `property` e ON (a.propertyId = e.id) LEFT JOIN `eLandReceiptDetails` f ON (a.id = f.receiptId AND f.subTypeId NOT IN (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) LEFT JOIN `elandProcessFees` g ON (f.subTypeId = g.id) WHERE a.id = ?");
        $stmt->bind_param("i", $receiptId);
        $stmt->execute();
        $result = $stmt->get_result();
        $data = $result->fetch_all(MYSQLI_ASSOC);
        $stmt->close();
        return json_encode($data);

    }

    public function fetchReciptDetails($receiptId){
        $conn = $this->conn;
        $stmt = $conn->prepare("SELECT a.*, c.name 'receiptDescription' FROM `eLandReceiptDetails` a JOIN `eLandReceiptMaster` b ON (a.receiptId = b.id) LEFT JOIN `elandProcessFees` c ON (a.subTypeId = c.id) WHERE a.subTypeId != 3 AND b.id = ?");
        $stmt->bind_param("i", $receiptId);
        $stmt->execute();
        $result = $stmt->get_result();
        $data = $result->fetch_all(MYSQLI_ASSOC);
        $stmt->close();
        return json_encode($data);

    }
    
    public function fetchPaymentDetails($paymentId){
        $conn = $this->conn;
        $stmt = $conn->prepare("SELECT a.amount AS `totalAmount`, a.createdBy, b.*, c.name FROM eLandPaymentReference a LEFT JOIN eLandPaymentReferenceDetails b ON(a.id = b.paymentReferenceId) LEFT JOIN paymentReferenceTypes c ON (b.referenceType = c.id) WHERE a.id = ?");
        $stmt->bind_param("i", $paymentId);
        $stmt->execute();
        $result = $stmt->get_result();
        $data = $result->fetch_all(MYSQLI_ASSOC);
        $stmt->close();
        return json_encode($data);
    }

    public function changeAutoIncrementValue($id){
        $conn = $this->conn;
        $query = "ALTER TABLE eLandReceiptMaster AUTO_INCREMENT = $id";
        $stmt = $conn->query($query);

        return true;
    }
    
    public function deleteReceiptMaster($id){
        $conn = $this->conn;
        $stmt = $conn->prepare("DELETE FROM eLandReceiptMaster WHERE id = ?");
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }

    public function deleteBillReceipt($id){
        $conn = $this->conn;
        $stmt = $conn->prepare("DELETE FROM eLandBillReceipt WHERE eLandReceiptMasterId = ?");
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }

    public function deleteReceiptDetails($id){
        $conn = $this->conn;
        $stmt = $conn->prepare("DELETE FROM eLandReceiptDetails WHERE receiptId = ?");
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }

    public function deletePayment($id){
        $conn = $this->conn;
        $stmt = $conn->prepare("DELETE FROM eLandPaymentReference WHERE id = ?");
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }

    public function deletePaymentDetails($id){
        $conn = $this->conn;
        $stmt = $conn->prepare("DELETE FROM eLandPaymentReferenceDetails WHERE paymentReferenceId = ?");
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $stmt->close();
    }

    public function getPropertyBalance($propertyNo){
        $conn = $this->conn;
        $stmt = $conn->prepare("SELECT a.* , b.id AS `PropertyOutstanding.id`, b.amount AS `PropertyOutstanding.amount`, b.accumaltedPanelty AS `PropertyOutstanding.accumaltedPanelty`, b.adjustmentAmount AS `PropertyOutstanding.adjustmentAmount`, b.creditAmount AS `PropertyOutstanding.creditAmount`, b.landRateArrears AS `PropertyOutstanding.landRateArrears`, b.groundRateArrears AS `PropertyOutstanding.groundRateArrears`, b.groundRent AS `PropertyOutstanding.groundRent`, b.annualRate AS `PropertyOutstanding.annualRate`, b.otherCharges AS `PropertyOutstanding.otherCharges`, b.otherChargesArrears AS `PropertyOutstanding.otherChargesArrears`, b.adjustment AS `PropertyOutstanding.adjustment`, b.createdAt AS `PropertyOutstanding.createdAt`, b.updatedAt AS `PropertyOutstanding.updatedAt`, c.id AS `_mobileCountry.id`, c.desc AS `_mobileCountry.desc`, d.name AS `_subCounty.name`, e.name AS `_ward.name`, g.name AS `_landUsage.name`, h.name AS `_interest.name` FROM property a LEFT  JOIN propertyOutstanding b ON (a.id = b.propertyId) LEFT  JOIN countries c ON (a.mobileCountryId = c.id) LEFT JOIN subCounties d ON (a.subCountyId = d.id ) LEFT JOIN wards e ON (a.wardId = e.id) LEFT JOIN landUsages g ON (a.landUsageId = g.id) LEFT JOIN interests h ON (a.interestId = h.id ) WHERE a.id = ?");
        $stmt->bind_param("i", $propertyNo);
        $stmt->execute();
        $result = $stmt->get_result();
        $data = $result->fetch_all(MYSQLI_ASSOC);
        $stmt->close();
        return json_encode($data);
    }

}

$lands_obj = new LandsBackend();

$obj=new TestMaster();

$createdBy = 1;

$property_list = [30559, 32822, 30554, 29283, 27667, 29174, 32849, 30521, 31029, 31677, 31148, 38769, 47163, 31343]; // List of property numbers to process

$payment_ref_list = [
    30559 => 'TTS2VR95HWNP',
    32822 => 'TTMTM89M8DBX',
    30554 => 'TTMGLYOITRV3',
    29283 => 'TTKWDAUHYSKA',
    27667 => 'TTQ2XLL37SXD',
    29174 => 'TTB2LF6O95HV',
    32849 => 'TTGDCHAAPQ19',
    30521 => 'TTP7GLM79RLL',
    31029 => 'TTSG4XKUR6S9',
    31677 => 'TTX0DZ78FXFY',
    31148 => 'TTV6HCP4W8NS',
    38769 => 'TT5ZKWO7ZCWU',
    47163 => 'TTF01N2RH6OC',
    31343 => 'TTA1STUXLDKM',
];

$properties = [];

foreach ($property_list as $propertyNo) {
    $propertyData = json_decode($obj->getPropertyBalance($propertyNo), true);
    
    if ($propertyData && isset($propertyData[0]['PropertyOutstanding.amount']) && $propertyData[0]['PropertyOutstanding.amount'] > 0) {
        $properties[$propertyNo] = [
            [
                'PaymentMethod'   => 2,
                'PaymentBank'     => 'National Bank',
                'PaymentRef'      => $payment_ref_list[$propertyNo] ?? '',
                'PaymentRefDate'  => date('Y-m-d'), // Use current date
                'AmountPaid'      => $propertyData[0]['PropertyOutstanding.amount'], // Use the outstanding amount as the payment
            ]
        ];
    } else {
        echo "Failed to fetch data for property number: {$propertyNo}\n";
    }
}

print_r($properties);


function processReceipts(LandsBackend $lands, int $propertyNo, array $payments, int $createdBy){
    // compute total paid automatically
    $total = array_sum(array_column($payments, 'AmountPaid'));

    $raw = $lands->processPropertyReceipts($propertyNo, $payments, $createdBy, $total);
    $data = json_decode($raw, true);

    return $data;
}

$receipt_arr = [];

// Loop through all properties:
foreach ($properties as $propNo => $payArr) {
    try {
        $result = processReceipts($lands_obj, $propNo, $payArr, $createdBy);

        printf("Property %d result:\n", $propNo);
        print_r($result);

        if (isset($result['status']) && $result['status'] === 'success') {

            $receipt_arr[] = $result['receiptId'] ?? null;

            printf(
                "✔ Property %d processed successfully, receipt ID = %s\n",
                $result['propertyId'],
                $result['receiptId']
            );
        } else {
            // you could also inspect $result['message'] if the backend ever returns an error message
            printf(
                "✘ Property %d failed to process (status = %s)\n",
                $propNo,
                $result['status'] ?? 'unknown'
            );
        }
    } catch (Exception $e) {
        printf("Error processing property {$propNo}: " . $e->getMessage());
        echo "Failed for property {$propNo}: " . $e->getMessage() . "\n";
    }
}

$receipt_details = [];

foreach ($receipt_arr as $receipt) {
    $paymentResults = json_decode($obj->fetchRecipt($receipt), true);

    if($paymentResults){
        $paymentReferenceId = $paymentResults[0]["paymentReferenceId"];

        $paymentDetails = json_decode($obj->fetchReciptDetails($receipt), true);

        $paymentResultsDetails = json_decode($obj->fetchPaymentDetails($paymentReferenceId), true);

        $receipt_details[$receipt] = [
            "receipt" => $paymentResults,
            "receiptDetails" => $paymentDetails,
            "paymentDetails" => $paymentResultsDetails
        ];

        $obj->deleteReceiptMaster($receipt);
        $obj->deleteBillReceipt($receipt);
        $obj->deleteReceiptDetails($receipt);
        $obj->deletePayment($paymentReferenceId);
        $obj->deletePaymentDetails($paymentReferenceId);
    }
}

// auto increment value to the first receipt ID
if (count($receipt_arr) > 0) {
    $firstReceiptId = $receipt_arr[0];
    $obj->changeAutoIncrementValue($firstReceiptId);
}

print_r(json_encode($receipt_details));

// delete self
unlink(__FILE__);
?>
